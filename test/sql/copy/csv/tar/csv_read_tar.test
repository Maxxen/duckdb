# name: test/sql/copy/csv/tar/csv_read_tar.test
# group: [tar]

query I
SELECT filename FROM read_blob('tar://data/csv/tar/ab.tar/*') ORDER BY ALL;
----
tar://data/csv/tar/ab.tar/a.csv
tar://data/csv/tar/ab.tar/b.csv

# Not a tar file
statement error
SELECT filename FROM read_blob('tar://data/csv/tar/a.csv') ORDER BY ALL;
----
IO Error: Could not find a '.tar' archive to open in: 'data/csv/tar/a.csv'

# Compressed file (not supported)
statement error
SELECT filename FROM read_blob('tar://data/csv/tar/ab.tar.gz/*') ORDER BY ALL;
----
IO Error: Could not find a '.tar' archive to open in: 'data/csv/tar/ab.tar.gz/*'. Note that DuckDB's tar archive filesystem does not support compressed tar archives (such as '.tar.gz' and '.tar.bz2')

# Explicit path
query III
SELECT * FROM read_csv('tar://data/csv/tar/ab.tar/a.csv') ORDER BY ALL;
----
1	2	3

# Full glob
query III
SELECT * FROM read_csv('tar://data/csv/tar/ab.tar/*') ORDER BY ALL;
----
1	2	3
4	5	6

# Partial glob
query III
SELECT * FROM read_csv('tar://data/csv/tar/ab.tar/b.*') ORDER BY ALL;
----
4	5	6

# Shallow glob
query I
SELECT filename FROM read_blob('tar://data/csv/tar/deep.tar/*') ORDER BY ALL;
----

# Deep glob, also make sure we can read large filenames
query I
SELECT filename FROM read_blob('tar://data/csv/tar/deep.tar/**') ORDER BY ALL;
----
tar://data/csv/tar/deep.tar/nested_dir/another_dir/really_long_file_name_that_is_over_100_characters_total_therefore_using_the_ustar_file_prefix_field.csv

# But we dont support nested globs
statement error
SELECT filename FROM read_blob('tar://data/csv/tar/deep.tar/**/*.csv') ORDER BY ALL;
----
Not implemented Error: Recursive globs are only supported at the end of tar file path patterns

# Now do it all again with the object cache enabled to cache the byte offsets of the tar entries
statement ok
SET enable_object_cache = true;

query I
SELECT filename FROM read_blob('tar://data/csv/tar/ab.tar/*') ORDER BY ALL;
----
tar://data/csv/tar/ab.tar/a.csv
tar://data/csv/tar/ab.tar/b.csv

# Explicit path
query III
SELECT * FROM read_csv('tar://data/csv/tar/ab.tar/a.csv') ORDER BY ALL;
----
1	2	3

# Full glob
query III
SELECT * FROM read_csv('tar://data/csv/tar/ab.tar/*') ORDER BY ALL;
----
1	2	3
4	5	6

# Partial glob
query III
SELECT * FROM read_csv('tar://data/csv/tar/ab.tar/b.*') ORDER BY ALL;
----
4	5	6
