# name: test/sql/types/geo/geometry.test
# group: [geo]

statement ok
create table t1(id INT, g GEOMETRY);

# Note: We print multipoints as POINTs, without extra parentheses, like PostGIS does
# But both syntaxes are accepted input

statement ok
insert into t1 values
	(1, 'POINT(0 1)'),
	(2, 'LINESTRING(0 0, 1 1, 2 2)'),
	(3, 'POLYGON((0 0, 4 0, 4 4, 0 4, 0 0))'),
	(4, 'MULTIPOINT((1 1), (2 2), (3 3))'),
	(5, 'MULTIPOINT(1 1, 2 2, 3 3)'), --alternative syntax
	(6, 'MULTILINESTRING((0 0, 1 1), (2 2, 3 3))'),
	(7, 'MULTIPOLYGON(((0 0, 4 0, 4 4, 0 4, 0 0)), ((5 5, 7 5, 7 7, 5 7, 5 5)))'),
	(8, 'GEOMETRYCOLLECTION(POINT(1 1), LINESTRING(0 0, 1 1))'),
	(9, NULL);

query II
select id, g::VARCHAR from t1 order by id;
----
1	POINT (0 1)
2	LINESTRING (0 0, 1 1, 2 2)
3	POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))
4	MULTIPOINT (1 1, 2 2, 3 3)
5	MULTIPOINT (1 1, 2 2, 3 3)
6	MULTILINESTRING ((0 0, 1 1), (2 2, 3 3))
7	MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0)), ((5 5, 7 5, 7 7, 5 7, 5 5)))
8	GEOMETRYCOLLECTION (POINT (1 1), LINESTRING (0 0, 1 1))
9	NULL

# Handle empty geometries
statement ok
create table t2(id INT, g GEOMETRY);

statement ok
insert into t2 values
	(1, 'POINT EMPTY'),
	(2, 'LINESTRING EMPTY'),
	(3, 'POLYGON EMPTY'),
	(4, 'MULTIPOINT EMPTY'),
	(5, 'MULTILINESTRING EMPTY'),
	(6, 'MULTIPOLYGON EMPTY'),
	(7, 'GEOMETRYCOLLECTION EMPTY'),

query II
select id, g::VARCHAR from t2 order by id;
----
1	POINT EMPTY
2	LINESTRING EMPTY
3	POLYGON EMPTY
4	MULTIPOINT EMPTY
5	MULTILINESTRING EMPTY
6	MULTIPOLYGON EMPTY
7	GEOMETRYCOLLECTION EMPTY

# Special case
query I
SELECT 'MULTIPOINT(EMPTY, 2 2, EMPTY)'::GEOMETRY::VARCHAR;
----
MULTIPOINT (EMPTY, 2 2, EMPTY)