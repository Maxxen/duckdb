diff --git a/spatial/include/spatial/gdal/functions.hpp b/spatial/include/spatial/gdal/functions.hpp
index 9bf2945..0a4bb2a 100644
--- a/spatial/include/spatial/gdal/functions.hpp
+++ b/spatial/include/spatial/gdal/functions.hpp
@@ -3,6 +3,7 @@
 #include "duckdb/function/table/arrow.hpp"
 #include "duckdb/parser/parsed_data/copy_info.hpp"
 #include "duckdb/function/copy_function.hpp"
+#include "duckdb/function/replacement_scan.hpp"
 
 #include "spatial/common.hpp"
 
@@ -26,8 +27,8 @@ private:
 
 	static unique_ptr<NodeStatistics> Cardinality(ClientContext &context, const FunctionData *data);
 
-	static unique_ptr<TableRef> ReplacementScan(ClientContext &context, const string &table_name,
-	                                            ReplacementScanData *data);
+	static unique_ptr<TableRef> ReplacementScan(ClientContext &context, ReplacementScanInput &input,
+	                                            optional_ptr<ReplacementScanData> data);
 
 public:
 	static void Register(DatabaseInstance &db);
diff --git a/spatial/src/spatial/core/io/osm/st_read_osm.cpp b/spatial/src/spatial/core/io/osm/st_read_osm.cpp
index 11055c9..72b3b71 100644
--- a/spatial/src/spatial/core/io/osm/st_read_osm.cpp
+++ b/spatial/src/spatial/core/io/osm/st_read_osm.cpp
@@ -839,8 +839,9 @@ static idx_t GetBatchIndex(ClientContext &context, const FunctionData *bind_data
 	return state.block->block_idx;
 }
 
-static unique_ptr<TableRef> ReadOsmPBFReplacementScan(ClientContext &context, const string &table_name,
-                                                      ReplacementScanData *data) {
+static unique_ptr<TableRef> ReadOsmPBFReplacementScan(ClientContext &context, ReplacementScanInput &input,
+                                                      optional_ptr<ReplacementScanData> data) {
+	auto &table_name = input.table_name;
 	// Check if the table name ends with .osm.pbf
 	if (!StringUtil::EndsWith(StringUtil::Lower(table_name), ".osm.pbf")) {
 		return nullptr;
diff --git a/spatial/src/spatial/core/io/shapefile/read_shapefile.cpp b/spatial/src/spatial/core/io/shapefile/read_shapefile.cpp
index fcc182e..1e7b5f7 100644
--- a/spatial/src/spatial/core/io/shapefile/read_shapefile.cpp
+++ b/spatial/src/spatial/core/io/shapefile/read_shapefile.cpp
@@ -540,8 +540,9 @@ static unique_ptr<NodeStatistics> GetCardinality(ClientContext &context, const F
 	return result;
 }
 
-static unique_ptr<TableRef> GetReplacementScan(ClientContext &context, const string &table_name,
-                                               ReplacementScanData *data) {
+static unique_ptr<TableRef> GetReplacementScan(ClientContext &context, ReplacementScanInput &input,
+                                               optional_ptr<ReplacementScanData> data) {
+	auto &table_name = input.table_name;
 	// Check if the table name ends with .shp
 	if (!StringUtil::EndsWith(StringUtil::Lower(table_name), ".shp")) {
 		return nullptr;
diff --git a/spatial/src/spatial/core/io/shapefile/read_shapefile_meta.cpp b/spatial/src/spatial/core/io/shapefile/read_shapefile_meta.cpp
index da3fe1e..d42342a 100644
--- a/spatial/src/spatial/core/io/shapefile/read_shapefile_meta.cpp
+++ b/spatial/src/spatial/core/io/shapefile/read_shapefile_meta.cpp
@@ -47,8 +47,11 @@ static ShapeTypeEntry shape_type_map[] = {
 static unique_ptr<FunctionData> ShapeFileMetaBind(ClientContext &context, TableFunctionBindInput &input,
                                                   vector<LogicalType> &return_types, vector<string> &names) {
 	auto result = make_uniq<ShapeFileMetaBindData>();
-	auto files = MultiFileReader::GetFileList(context, input.inputs[0], "ShapeFiles", FileGlobOptions::ALLOW_EMPTY);
-	for (auto &file : files) {
+
+	auto multi_file_reader = MultiFileReader::Create(input.table_function);
+	auto file_list = multi_file_reader->CreateFileList(context, input.inputs[0], FileGlobOptions::ALLOW_EMPTY);
+
+	for (auto &file : file_list->Files()) {
 		if (StringUtil::EndsWith(StringUtil::Lower(file), ".shp")) {
 			result->files.push_back(file);
 		}
diff --git a/spatial/src/spatial/core/optimizer_rules.cpp b/spatial/src/spatial/core/optimizer_rules.cpp
index 0f2f7e5..21472b8 100644
--- a/spatial/src/spatial/core/optimizer_rules.cpp
+++ b/spatial/src/spatial/core/optimizer_rules.cpp
@@ -267,13 +267,13 @@ public:
 		}
 	}
 
-	static void Optimize(ClientContext &context, OptimizerExtensionInfo *info, unique_ptr<LogicalOperator> &plan) {
+	static void Optimize(OptimizerExtensionInput &input, unique_ptr<LogicalOperator> &plan) {
 
-		TryOptimize(context, info, plan);
+		TryOptimize(input.context, input.info.get(), plan);
 
 		// Recursively optimize the children
 		for (auto &child : plan->children) {
-			Optimize(context, info, child);
+			Optimize(input, child);
 		}
 	}
 };
diff --git a/spatial/src/spatial/gdal/functions/st_read.cpp b/spatial/src/spatial/gdal/functions/st_read.cpp
index 9edf968..793a4df 100644
--- a/spatial/src/spatial/gdal/functions/st_read.cpp
+++ b/spatial/src/spatial/gdal/functions/st_read.cpp
@@ -5,6 +5,7 @@
 #include "duckdb/planner/filter/conjunction_filter.hpp"
 #include "duckdb/planner/filter/constant_filter.hpp"
 #include "duckdb/planner/table_filter.hpp"
+#include "duckdb/parser/tableref.hpp"
 #include "duckdb/function/function.hpp"
 #include "duckdb/function/replacement_scan.hpp"
 
@@ -592,9 +593,9 @@ unique_ptr<NodeStatistics> GdalTableFunction::Cardinality(ClientContext &context
 	return result;
 }
 
-unique_ptr<TableRef> GdalTableFunction::ReplacementScan(ClientContext &, const string &table_name,
-                                                        ReplacementScanData *) {
-
+unique_ptr<TableRef> GdalTableFunction::ReplacementScan(ClientContext &, ReplacementScanInput &input,
+                                                        optional_ptr<ReplacementScanData>) {
+	auto &table_name = input.table_name;
 	auto lower_name = StringUtil::Lower(table_name);
 	// Check if the table name ends with some common geospatial file extensions
 	if (StringUtil::EndsWith(lower_name, ".gpkg") || StringUtil::EndsWith(lower_name, ".fgb")) {
diff --git a/spatial/src/spatial/gdal/functions/st_read_meta.cpp b/spatial/src/spatial/gdal/functions/st_read_meta.cpp
index 2293072..f950fe7 100644
--- a/spatial/src/spatial/gdal/functions/st_read_meta.cpp
+++ b/spatial/src/spatial/gdal/functions/st_read_meta.cpp
@@ -56,12 +56,10 @@ static LogicalType LAYER_TYPE = LogicalType::STRUCT({
 
 static unique_ptr<FunctionData> Bind(ClientContext &context, TableFunctionBindInput &input,
                                      vector<LogicalType> &return_types, vector<string> &names) {
-
-	auto file_name = input.inputs[0].GetValue<string>();
 	auto result = make_uniq<GDALMetadataBindData>();
 
-	result->file_names =
-	    MultiFileReader::GetFileList(context, input.inputs[0], "gdal metadata", FileGlobOptions::ALLOW_EMPTY);
+	auto multi_file_reader = MultiFileReader::Create(input.table_function);
+	result->file_names = multi_file_reader->CreateFileList(context, input.inputs[0], FileGlobOptions::ALLOW_EMPTY)->GetAllFiles();
 
 	names.push_back("file_name");
 	return_types.push_back(LogicalType::VARCHAR);
